/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package countingobjectimage;

import static countingobjectimage.LaplaceDemoRun.Mat2BufferedImage;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
//import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.*;

/**
 *
 * @author pc
 */
public class Main extends javax.swing.JFrame {

    JFileChooser chooser;

    String path = "C:\\Users\\pc\\Pictures";
    // public static final 
    static String a, b, c;
    String name = "  1. Yuda Hendriawan Budi H(06111640000010)  "
            + "  2. Shafira Herlinawati(06111640000013)  "
            + "  3. Ario Fajar Pratama(06111640000087)  ";

    /**
     * Creates new form Main
     */
    public Main() {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        JFrame jframe = new JFrame("TUGAS PCD");
        jframe.setTitle("Tugas PCD Image Enhancement Colouring");
        // jLabel5.setText("TUGAS PCD IMAGE ENHANCEMENT COLOURING");
        //judul.setText("TUGAS PCD IMAGE ENHANCEMENT COLOURING");
        initComponents();
        datadiri.setText(name);
        ActionListener acl = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                a = datadiri.getText();
                b = a.substring(0, 1);
                c = a.substring(1, a.length());
                datadiri.setText(c + b);
            }
        };
        new javax.swing.Timer(150, acl).start();

        slider.setVisible(false);
        slider1.setVisible(false);
        ;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        btn_sobel = new javax.swing.JButton();
        btn_countObject = new javax.swing.JButton();
        datadiri = new javax.swing.JLabel();
        button_exit = new javax.swing.JButton();
        button_fileChooser = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        text_filePath = new javax.swing.JTextField();
        label_image = new javax.swing.JLabel();
        button_reset = new javax.swing.JButton();
        button_originalImage = new javax.swing.JButton();
        text_getClick = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        button_about = new javax.swing.JButton();
        text_sliderValue = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        judul = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        btn_laplace = new javax.swing.JButton();
        btn_canny = new javax.swing.JButton();
        btn_binary = new javax.swing.JButton();
        btn_binaryinv = new javax.swing.JButton();
        slider1 = new javax.swing.JSlider();
        btn_erotion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Deteksi Tepi PCD");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        btn_sobel.setBackground(new java.awt.Color(0, 0, 0));
        btn_sobel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_sobel.setForeground(new java.awt.Color(0, 204, 204));
        btn_sobel.setText("Sobel");
        btn_sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sobelActionPerformed(evt);
            }
        });

        btn_countObject.setBackground(new java.awt.Color(0, 0, 0));
        btn_countObject.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_countObject.setForeground(new java.awt.Color(0, 204, 204));
        btn_countObject.setText("Count Object");
        btn_countObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_countObjectActionPerformed(evt);
            }
        });

        datadiri.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        datadiri.setForeground(new java.awt.Color(0, 204, 204));
        datadiri.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datadiri.setToolTipText("HALOOO");

        button_exit.setBackground(new java.awt.Color(0, 0, 0));
        button_exit.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_exit.setForeground(new java.awt.Color(0, 204, 204));
        button_exit.setText("Exit");
        button_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_exitActionPerformed(evt);
            }
        });

        button_fileChooser.setBackground(new java.awt.Color(0, 0, 0));
        button_fileChooser.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_fileChooser.setForeground(new java.awt.Color(0, 204, 204));
        button_fileChooser.setText("Choose File");
        button_fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_fileChooserActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setToolTipText("File.jpeg");

        text_filePath.setEditable(false);
        text_filePath.setBackground(new java.awt.Color(0, 0, 0));
        text_filePath.setForeground(new java.awt.Color(0, 204, 204));
        text_filePath.setToolTipText("File Path");
        text_filePath.setFocusable(false);
        text_filePath.setMargin(new java.awt.Insets(2, 10, 2, 2));
        text_filePath.setRequestFocusEnabled(false);

        label_image.setBackground(new java.awt.Color(255, 255, 255));
        label_image.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        label_image.setForeground(new java.awt.Color(0, 204, 204));
        label_image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_image.setText("Show Image");
        label_image.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));
        label_image.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        button_reset.setBackground(new java.awt.Color(0, 0, 0));
        button_reset.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_reset.setForeground(new java.awt.Color(0, 204, 204));
        button_reset.setText("Reset");
        button_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_resetActionPerformed(evt);
            }
        });

        button_originalImage.setBackground(new java.awt.Color(0, 0, 0));
        button_originalImage.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_originalImage.setForeground(new java.awt.Color(0, 204, 204));
        button_originalImage.setText("Original Image");
        button_originalImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_originalImageActionPerformed(evt);
            }
        });

        text_getClick.setEditable(false);
        text_getClick.setBackground(new java.awt.Color(0, 0, 0));
        text_getClick.setForeground(new java.awt.Color(0, 204, 204));
        text_getClick.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        text_getClick.setToolTipText("Original Image Active");
        text_getClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_getClickActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Jumlah Object");

        button_about.setBackground(new java.awt.Color(0, 0, 0));
        button_about.setForeground(new java.awt.Color(0, 204, 204));
        button_about.setText("About Program");
        button_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_aboutActionPerformed(evt);
            }
        });

        text_sliderValue.setEditable(false);
        text_sliderValue.setBackground(new java.awt.Color(0, 0, 0));
        text_sliderValue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        text_sliderValue.setForeground(new java.awt.Color(0, 204, 204));
        text_sliderValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        text_sliderValue.setToolTipText("Original Image Active");
        text_sliderValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_sliderValueActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 204));
        jLabel4.setText("Button Active");

        judul.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        judul.setForeground(new java.awt.Color(0, 204, 204));
        judul.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        judul.setText("DETEKSI TEPI IMAGE PROCESSING");

        slider.setBackground(new java.awt.Color(51, 51, 51));
        slider.setForeground(new java.awt.Color(0, 204, 255));
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        btn_laplace.setBackground(new java.awt.Color(0, 0, 0));
        btn_laplace.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_laplace.setForeground(new java.awt.Color(0, 204, 204));
        btn_laplace.setText("Laplace");
        btn_laplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_laplaceActionPerformed(evt);
            }
        });

        btn_canny.setBackground(new java.awt.Color(0, 0, 0));
        btn_canny.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_canny.setForeground(new java.awt.Color(0, 204, 204));
        btn_canny.setText("Canny");
        btn_canny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cannyActionPerformed(evt);
            }
        });

        btn_binary.setBackground(new java.awt.Color(0, 0, 0));
        btn_binary.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_binary.setForeground(new java.awt.Color(0, 204, 204));
        btn_binary.setText("Binary");
        btn_binary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_binaryActionPerformed(evt);
            }
        });

        btn_binaryinv.setBackground(new java.awt.Color(0, 0, 0));
        btn_binaryinv.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_binaryinv.setForeground(new java.awt.Color(0, 204, 204));
        btn_binaryinv.setText("Binary Invers");
        btn_binaryinv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_binaryinvActionPerformed(evt);
            }
        });

        slider1.setBackground(new java.awt.Color(51, 51, 51));
        slider1.setForeground(new java.awt.Color(0, 204, 255));
        slider1.setPaintLabels(true);
        slider1.setPaintTicks(true);
        slider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider1StateChanged(evt);
            }
        });

        btn_erotion.setBackground(new java.awt.Color(0, 0, 0));
        btn_erotion.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_erotion.setForeground(new java.awt.Color(0, 204, 204));
        btn_erotion.setText("Erotion");
        btn_erotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_erotionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(jLabel4)
                        .addGap(9, 9, 9)
                        .addComponent(text_getClick, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(307, 307, 307)
                        .addComponent(button_reset, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(button_about, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(button_fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(text_filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(button_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(649, 649, 649)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(datadiri, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_originalImage, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_laplace, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_canny, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_sobel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(text_sliderValue, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_countObject, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btn_binary, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_binaryinv, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_erotion, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_image, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slider1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4))
                    .addComponent(text_getClick, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_reset))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(button_originalImage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_laplace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_canny)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_sobel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_binary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_binaryinv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_erotion)
                        .addGap(80, 80, 80)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(text_sliderValue, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btn_countObject))
                    .addComponent(label_image, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(slider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_about)
                    .addComponent(button_fileChooser)
                    .addComponent(text_filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_exit))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(datadiri, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 760));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void button_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_exitActionPerformed
        int confirmed = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to EXIT the program?", "Confirmation Dialog",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            System.exit(0);
            dispose();
        } else {

        }
    }//GEN-LAST:event_button_exitActionPerformed

    private void button_fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_fileChooserActionPerformed
        BufferedImage bi = null;
        try {
            bi = ImageIO.read(file());
            label_image.setText(null);
            label_image.setIcon(ResizeImage(bi));
        } catch (Exception e) {
        }


    }//GEN-LAST:event_button_fileChooserActionPerformed

    private void button_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_resetActionPerformed

        int confirmed = JOptionPane.showConfirmDialog(null,
                "Are you sure to RESET the program?", "Confirmation Dialog",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            label_image.setIcon(null);
            label_image.setText("Show Image");
            text_filePath.setText(null);
            text_getClick.setText(null);
//            slider.setEnabled(false);
//            slider.setValue(100);
            text_sliderValue.setText(null);
        } else {

        }


    }//GEN-LAST:event_button_resetActionPerformed

    private void btn_countObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_countObjectActionPerformed
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Count Active");
            slider.setEnabled(true);
            slider.setVisible(true);
            slider.setMinimum(0);
            slider.setMaximum(255);
            slider.setValue(50);
            slider1.setEnabled(true);
            slider1.setVisible(true);
            slider1.setMinimum(0);
            slider1.setMaximum(21);
            slider1.setValue(1);

            //text_sliderValue.setText(null);
//            JOptionPane.showMessageDialog(null, "Slider is activated", "Message", (int) JOptionPane.CLOSED_OPTION);
//            float CENTER_ALIGNMENT1 = JOptionPane.CENTER_ALIGNMENT;
//            //float CENTER_ALIGNMENT1 =O JOptionPane.CENTER_ALIGNMENT;
        }
//        
    }//GEN-LAST:event_btn_countObjectActionPerformed

    private void text_getClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_getClickActionPerformed
//        if (.isRequestFocusEnabled()) {
//            text_getClick.setText("Brightness is Active");
//
//        }
    }//GEN-LAST:event_text_getClickActionPerformed

    private void button_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_aboutActionPerformed
        String path = "\n06111640000010 - Yuda Hendriawan Budi H \n\n"
                + "06111640000013 - Shafira Herlinawati \n\n"
                + "06111640000087 - Ario Fajar Pratama \n\n";
        JOptionPane.showMessageDialog(null, path, "Anggota Kelompok", JOptionPane.CLOSED_OPTION);
    }//GEN-LAST:event_button_aboutActionPerformed

    private void text_sliderValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_sliderValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_sliderValueActionPerformed

    private void btn_sobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sobelActionPerformed

        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Sobel Active");
            slider.setEnabled(true);
            slider.setVisible(true);
            slider.setMinimum(0);
            slider.setMaximum(100);
            slider.setValue(1);
            slider1.setEnabled(false);
            slider1.setVisible(false);

        }

    }//GEN-LAST:event_btn_sobelActionPerformed

    private void button_originalImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_originalImageActionPerformed
        //   File file = null;
        try {
            File file = new File(text_filePath.getText());

            BufferedImage bi = null;
            try {
                bi = ImageIO.read(file);
            } catch (Exception e) {
            }
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(bi));
            text_getClick.setText("Original Image Active");
            //     slider.setEnabled(false);
            slider.setVisible(false);
            slider1.setVisible(false);
            text_sliderValue.setText(null);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);

        }
    }//GEN-LAST:event_button_originalImageActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        try {
            if (text_getClick.getText().equals("Laplace Active")) {
                Mat src, src_gray = new Mat(), dst = new Mat();
                int kernel_size = 3;
                double scaleSlider = (double) slider.getValue();
                int scale = 1;
                int delta = 0;
                int ddepth = CvType.CV_16S;

                String window_name = text_filePath.getText();
                if (window_name.isEmpty()) {
                    JOptionPane.showMessageDialog(null,
                            "Please choose image first", "Image has not been attached",
                            JOptionPane.OK_OPTION);
                } else {

                    //! [variables]
                    //! [load]
                    //  String imageName = ((args.length > 0) ? args[0] : "C:\\Users\\pc\\Pictures\\84631.jpg");
                    src = Imgcodecs.imread(window_name, Imgcodecs.IMREAD_COLOR); // Load an image

                    //! [load]
                    //! [reduce_noise]
                    // Reduce noise by blurring with a Gaussian filter ( kernel size = 3 )
                    Imgproc.GaussianBlur(src, src, new Size(3, 3), 0, 0, Core.BORDER_DEFAULT);

                    //! [reduce_noise]
                    //! [convert_to_gray]
                    // Convert the image to grayscale
                    Imgproc.cvtColor(src, src_gray, Imgproc.COLOR_RGB2GRAY);

                    //! [convert_to_gray]
                    /// Apply Laplace function
                    Mat abs_dst = new Mat();

                    //! [laplacian]
                    Imgproc.Laplacian(src_gray, dst, ddepth, kernel_size, scaleSlider, delta, Core.BORDER_DEFAULT);

                    //! [laplacian]
                    //! [convert]
                    // converting back to CV_8U
                    Core.convertScaleAbs(dst, abs_dst);
                    BufferedImage img = Mat2BufferedImage(abs_dst);

                    // displayImage(img, "ASU");
                    label_image.setText(null);
                    label_image.setIcon(null);
                    label_image.setIcon(ResizeImage(img));

                }
            } else if (text_getClick.getText().equals("Sobel Active")) {
                String filename = text_filePath.getText();

                File file = new File(filename);
                BufferedImage image = null;
                try {
                    image = ImageIO.read(file);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                //displayImage(image,"Gambar Awal");
                int x = image.getWidth();
                int y = image.getHeight();

                int maxGval = 0;
                int[][] edgeColors = new int[x][y];
                int maxGradient = -1;

                for (int i = 1; i < x - 1; i++) {
                    for (int j = 1; j < y - 1; j++) {

                        int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
                        int val01 = getGrayScale(image.getRGB(i - 1, j));
                        int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

                        int val10 = getGrayScale(image.getRGB(i, j - 1));
                        int val11 = getGrayScale(image.getRGB(i, j));
                        int val12 = getGrayScale(image.getRGB(i, j + 1));

                        int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
                        int val21 = getGrayScale(image.getRGB(i + 1, j));
                        int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

                        int gx = ((-1 * val00) + (0 * val01) + (1 * val02))
                                + ((-2 * val10) + (0 * val11) + (2 * val12))
                                + ((-1 * val20) + (0 * val21) + (1 * val22));

                        int gy = ((-1 * val00) + (-2 * val01) + (-1 * val02))
                                + ((0 * val10) + (0 * val11) + (0 * val12))
                                + ((1 * val20) + (2 * val21) + (1 * val22));

                        double gval = Math.sqrt((gx * gx) + (gy * gy));
                        int g = (int) gval;

                        if (maxGradient < g) {
                            maxGradient = g;
                        }

                        edgeColors[i][j] = g;
                    }
                }

                double scale = (double) slider.getValue();

                for (int i = 1; i < x - 1; i++) {
                    for (int j = 1; j < y - 1; j++) {
                        int edgeColor = edgeColors[i][j];
                        edgeColor = (int) (edgeColor * scale);
                        edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

                        image.setRGB(i, j, edgeColor);
                    }
                }
                label_image.setText(null);
                label_image.setIcon(null);
                label_image.setIcon(ResizeImage(image));
            } else if (text_getClick.getText().equals("Count Active")) {
                Mat srcGray = new Mat();
                Mat image = Imgcodecs.imread(text_filePath.getText());

                Imgproc.cvtColor(image, srcGray, Imgproc.COLOR_BGR2GRAY);
//                Image imgshow = Mat2BufferedImage(srcGray);
//                displayImage(imgshow, "Gray");

                Mat dst = new Mat();
                double scale = (double) slider.getValue();
                Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY);
//                Image imgshow1 = Mat2BufferedImage(dst);
//                displayImage(imgshow1, "Thresh");
                double n = (double) slider1.getValue();
                Mat element = Imgproc.getStructuringElement(Imgproc.CV_SHAPE_ELLIPSE, new Size(2 * n + 1, 2 * n + 1),
                        new Point(n, n));
                Mat matImgDst = new Mat();
                Imgproc.erode(dst, matImgDst, element);

                Random rng = new Random(12345);

                List<MatOfPoint> contours = new ArrayList<>();
                Mat hierarchy = new Mat();
                Imgproc.findContours(matImgDst, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);
                MatOfPoint2f[] contoursPoly = new MatOfPoint2f[contours.size()];
                Rect[] boundRect = new Rect[contours.size()];
                Point[] centers = new Point[contours.size()];
                float[][] radius = new float[contours.size()][1];

                for (int i = 0; i < contours.size(); i++) {
                    contoursPoly[i] = new MatOfPoint2f();
                    Imgproc.approxPolyDP(new MatOfPoint2f(contours.get(i).toArray()), contoursPoly[i], 3, true);
                    boundRect[i] = Imgproc.boundingRect(new MatOfPoint(contoursPoly[i].toArray()));
                    centers[i] = new Point();
                    Imgproc.minEnclosingCircle(contoursPoly[i], centers[i], radius[i]);
                }
                Mat drawing = Mat.zeros(dst.size(), CvType.CV_8UC3);
                List<MatOfPoint> contoursPolyList = new ArrayList<>(contoursPoly.length);
                for (MatOfPoint2f poly : contoursPoly) {
                    contoursPolyList.add(new MatOfPoint(poly.toArray()));
                }

                for (int i = 1; i < contours.size(); i++) {
                    Scalar color = new Scalar(rng.nextInt(256), rng.nextInt(256), rng.nextInt(256));
                    Imgproc.rectangle(drawing, boundRect[i].tl(), boundRect[i].br(), color, 2);
                    Imgproc.putText(drawing, Integer.toString(i),
                            new Point(centers[i].x, centers[i].y),
                            Core.BORDER_CONSTANT, 1.0, new Scalar(255, 255, 255));
                }
                label_image.setText(null);
                label_image.setIcon(null);
                label_image.setIcon(ResizeImage(Mat2BufferedImage(drawing)));
                if ((contours.size() - 1) < 0) {
                    text_sliderValue.setText("0");
                } else {
                    text_sliderValue.setText(Integer.toString(contours.size() - 1));
                }

//                Image imgshow2 = Mat2BufferedImage(drawing);
//                displayImage(imgshow2, "count");
//                System.out.println(contours.size() - 1);
            } else if (text_getClick.getText().equals("Binary Active")) {
                Mat src = Imgcodecs.imread(text_filePath.getText());
                Mat srcGray = new Mat();
                Imgproc.cvtColor(src, srcGray, Imgproc.COLOR_BGR2GRAY);
                Mat dst = new Mat();
                double scale = (double) slider.getValue();
                Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY);
                label_image.setText(null);
                label_image.setIcon(null);
                label_image.setIcon(ResizeImage(Mat2BufferedImage(dst)));

            } else if (text_getClick.getText().equals("Binary Invers Active")) {
                Mat src = Imgcodecs.imread(text_filePath.getText());
                Mat srcGray = new Mat();
                Imgproc.cvtColor(src, srcGray, Imgproc.COLOR_BGR2GRAY);
                Mat dst = new Mat();
                double scale = (double) slider.getValue();
                Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY_INV);
                label_image.setText(null);
                label_image.setIcon(null);
                label_image.setIcon(ResizeImage(Mat2BufferedImage(dst)));

            }
            else if(text_getClick.getText().equals("Erotion Active")){
            Mat srcGray = new Mat();
            Mat image = Imgcodecs.imread(text_filePath.getText());

            Imgproc.cvtColor(image, srcGray, Imgproc.COLOR_BGR2GRAY);
//                Image imgshow = Mat2BufferedImage(srcGray);
//                displayImage(imgshow, "Gray");

            Mat dst = new Mat();
            double scale = (double) slider.getValue();
            Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY);
//                Image imgshow1 = Mat2BufferedImage(dst);
//                displayImage(imgshow1, "Thresh");
            double n = (double) slider1.getValue();
            Mat element = Imgproc.getStructuringElement(Imgproc.CV_SHAPE_ELLIPSE, new Size(2 * n + 1, 2 * n + 1),
                    new Point(n, n));
            Mat matImgDst = new Mat();
            Imgproc.erode(dst, matImgDst, element);
            
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(Mat2BufferedImage(matImgDst)));
        
        }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_sliderStateChanged

    private void btn_laplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_laplaceActionPerformed
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Laplace Active");
            slider.setEnabled(true);
            slider.setVisible(true);
            slider.setMinimum(0);
            slider.setMaximum(100);
            slider.setValue(1);
            slider1.setEnabled(false);
            slider1.setVisible(false);

        }
    }//GEN-LAST:event_btn_laplaceActionPerformed

    private void btn_cannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cannyActionPerformed
        try {
            if (text_filePath.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "Please choose image first", "Image has not been attached",
                        JOptionPane.OK_OPTION);
            } else {
                String file = text_filePath.getText();

                // Reading the image
                Mat src = Imgcodecs.imread(file);

                // Creating an empty matrix to store the result
                Mat gray = new Mat();

                // Converting the image from color to Gray
                Imgproc.cvtColor(src, gray, Imgproc.COLOR_BGR2GRAY);
                Mat edges = new Mat();

                // Detecting the edges
                Imgproc.Canny(gray, edges, 60, 60 * 3);
                BufferedImage image = Mat2BufferedImage(edges);
                // Writing the image
                //  Imgcodecs.imwrite("E:/OpenCV/chap17/canny_output.jpg", edges);

                label_image.setText(null);
                label_image.setIcon(null);
                label_image.setIcon(ResizeImage(image));
                text_getClick.setText("Canny Active");
                slider.setEnabled(false);
                text_sliderValue.setText(null);
                slider.setVisible(false);
                slider1.setVisible(false);
                slider1.setEnabled(false);
                String des = path;
                Imgcodecs.imwrite(path + "\\hasilcanny.jpg", edges);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        }
        //get image width and height
    }//GEN-LAST:event_btn_cannyActionPerformed

    private void btn_binaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_binaryActionPerformed
        // TODO add your handling code here:
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Binary Active");
            slider.setEnabled(true);
            slider.setVisible(true);
            slider.setMinimum(0);
            slider.setMaximum(255);
            slider.setValue(50);
            slider1.setEnabled(false);
            slider1.setVisible(false);
            Mat src = Imgcodecs.imread(text_filePath.getText());
            Mat srcGray = new Mat();
            Imgproc.cvtColor(src, srcGray, Imgproc.COLOR_BGR2GRAY);
            Mat dst = new Mat();
            Imgproc.threshold(srcGray, dst, 200, 255, Imgproc.THRESH_BINARY);
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(Mat2BufferedImage(dst)));

        }

    }//GEN-LAST:event_btn_binaryActionPerformed

    private void btn_binaryinvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_binaryinvActionPerformed
        // TODO add your handling code here:
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Binary Invers Active");
            slider.setEnabled(true);
            slider.setVisible(true);
            slider.setMinimum(0);
            slider.setMaximum(255);
            slider.setValue(50);
            slider1.setEnabled(false);
            slider1.setVisible(false);
            Mat src = Imgcodecs.imread(text_filePath.getText());
            Mat srcGray = new Mat();
            Imgproc.cvtColor(src, srcGray, Imgproc.COLOR_BGR2GRAY);
            Mat dst = new Mat();
            Imgproc.threshold(srcGray, dst, 200, 255, Imgproc.THRESH_BINARY_INV);
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(Mat2BufferedImage(dst)));

        }

    }//GEN-LAST:event_btn_binaryinvActionPerformed

    private void slider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider1StateChanged
        // TODO add your handling code here:
        if (text_getClick.getText().equals("Count Active")) {

            Mat srcGray = new Mat();
            Mat image = Imgcodecs.imread(text_filePath.getText());

            Imgproc.cvtColor(image, srcGray, Imgproc.COLOR_BGR2GRAY);
//                Image imgshow = Mat2BufferedImage(srcGray);
//                displayImage(imgshow, "Gray");

            Mat dst = new Mat();
            double scale = (double) slider.getValue();
            Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY);
//                Image imgshow1 = Mat2BufferedImage(dst);
//                displayImage(imgshow1, "Thresh");
            double n = (double) slider1.getValue();
            Mat element = Imgproc.getStructuringElement(Imgproc.CV_SHAPE_ELLIPSE, new Size(2 * n + 1, 2 * n + 1),
                    new Point(n, n));
            Mat matImgDst = new Mat();
            Imgproc.erode(dst, matImgDst, element);

            Random rng = new Random(12345);

            List<MatOfPoint> contours = new ArrayList<>();
            Mat hierarchy = new Mat();
            Imgproc.findContours(matImgDst, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);
            MatOfPoint2f[] contoursPoly = new MatOfPoint2f[contours.size()];
            Rect[] boundRect = new Rect[contours.size()];
            Point[] centers = new Point[contours.size()];
            float[][] radius = new float[contours.size()][1];

            for (int i = 0; i < contours.size(); i++) {
                contoursPoly[i] = new MatOfPoint2f();
                Imgproc.approxPolyDP(new MatOfPoint2f(contours.get(i).toArray()), contoursPoly[i], 3, true);
                boundRect[i] = Imgproc.boundingRect(new MatOfPoint(contoursPoly[i].toArray()));
                centers[i] = new Point();
                Imgproc.minEnclosingCircle(contoursPoly[i], centers[i], radius[i]);
            }
            Mat drawing = Mat.zeros(dst.size(), CvType.CV_8UC3);
            List<MatOfPoint> contoursPolyList = new ArrayList<>(contoursPoly.length);
            for (MatOfPoint2f poly : contoursPoly) {
                contoursPolyList.add(new MatOfPoint(poly.toArray()));
            }

            for (int i = 1; i < contours.size(); i++) {
                Scalar color = new Scalar(rng.nextInt(256), rng.nextInt(256), rng.nextInt(256));
                Imgproc.rectangle(drawing, boundRect[i].tl(), boundRect[i].br(), color, 2);
                Imgproc.putText(drawing, Integer.toString(i),
                        new Point(centers[i].x, centers[i].y),
                        Core.BORDER_CONSTANT, 1.0, new Scalar(255, 255, 255));
            }
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(Mat2BufferedImage(drawing)));
            if ((contours.size() - 1) < 0) {
                text_sliderValue.setText("0");
            } else {
                text_sliderValue.setText(Integer.toString(contours.size() - 1));
            }
        }
        else if(text_getClick.getText().equals("Erotion Active")){
            Mat srcGray = new Mat();
            Mat image = Imgcodecs.imread(text_filePath.getText());

            Imgproc.cvtColor(image, srcGray, Imgproc.COLOR_BGR2GRAY);
//                Image imgshow = Mat2BufferedImage(srcGray);
//                displayImage(imgshow, "Gray");

            Mat dst = new Mat();
            double scale = (double) slider.getValue();
            Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY);
//                Image imgshow1 = Mat2BufferedImage(dst);
//                displayImage(imgshow1, "Thresh");
            double n = (double) slider1.getValue();
            Mat element = Imgproc.getStructuringElement(Imgproc.CV_SHAPE_ELLIPSE, new Size(2 * n + 1, 2 * n + 1),
                    new Point(n, n));
            Mat matImgDst = new Mat();
            Imgproc.erode(dst, matImgDst, element);
            
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(Mat2BufferedImage(matImgDst)));
        
        }
    }//GEN-LAST:event_slider1StateChanged

    private void btn_erotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_erotionActionPerformed
        // TODO add your handling code here:
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Erotion Active");
            slider.setEnabled(true);
            slider.setVisible(true);
            slider.setMinimum(0);
            slider.setMaximum(255);
            slider.setValue(50);
            slider1.setEnabled(true);
            slider1.setVisible(true);
            slider1.setMinimum(0);
            slider1.setMaximum(21);
            slider1.setValue(1);
            Mat srcGray = new Mat();
            Mat image = Imgcodecs.imread(text_filePath.getText());

            Imgproc.cvtColor(image, srcGray, Imgproc.COLOR_BGR2GRAY);
//                Image imgshow = Mat2BufferedImage(srcGray);
//                displayImage(imgshow, "Gray");

            Mat dst = new Mat();
            double scale = (double) slider.getValue();
            Imgproc.threshold(srcGray, dst, scale, 255, Imgproc.THRESH_BINARY);
//                Image imgshow1 = Mat2BufferedImage(dst);
//                displayImage(imgshow1, "Thresh");
            double n = (double) slider1.getValue();
            Mat element = Imgproc.getStructuringElement(Imgproc.CV_SHAPE_ELLIPSE, new Size(2 * n + 1, 2 * n + 1),
                    new Point(n, n));
            Mat matImgDst = new Mat();
            Imgproc.erode(dst, matImgDst, element);
            
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(Mat2BufferedImage(matImgDst)));

        }
    }//GEN-LAST:event_btn_erotionActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Main().setVisible(true);

            }
        });
    }

    public ImageIcon ResizeImage(BufferedImage ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(label_image.getWidth(), label_image.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }

    public File file() {
        JFileChooser chooser = new JFileChooser(path);
        chooser.setDialogTitle("Choose Image..");
        FileNameExtensionFilter filter
                = new FileNameExtensionFilter("JPG Images", "jpg", "png");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        text_filePath.setText(file.toString());
        text_getClick.setText("Original Image Active");
        //    slider.setEnabled(false);
        slider.setVisible(false);
        slider1.setVisible(false);
        text_sliderValue.setText(null);
        return file;
    }

    public static BufferedImage Mat2BufferedImage(Mat m) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (m.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels() * m.cols() * m.rows();
        byte[] b = new byte[bufferSize];
        m.get(0, 0, b);
        BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return image;
    }

    public static void displayImage(Image img, String title) {
        ImageIcon icon = new ImageIcon(img);
        JFrame frame = new JFrame();
        frame.setLayout(new FlowLayout());
        frame.setSize(img.getWidth(null) + 50, img.getHeight(null) + 50);
        JLabel lbl = new JLabel();
        lbl.setIcon(icon);
        frame.add(lbl);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setTitle(title);
    }

    public static int getGrayScale(int rgb) {
        int r = (rgb >> 16) & 0xff;
        int g = (rgb >> 8) & 0xff;
        int b = (rgb) & 0xff;

        //from https://en.wikipedia.org/wiki/Grayscale, calculating luminance
        int gray = (int) (0.2126 * r + 0.7152 * g + 0.0722 * b);
        //int gray = (r + g + b) / 3;

        return gray;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_binary;
    private javax.swing.JButton btn_binaryinv;
    private javax.swing.JButton btn_canny;
    private javax.swing.JButton btn_countObject;
    private javax.swing.JButton btn_erotion;
    private javax.swing.JButton btn_laplace;
    private javax.swing.JButton btn_sobel;
    private javax.swing.JButton button_about;
    private javax.swing.JButton button_exit;
    private javax.swing.JButton button_fileChooser;
    private javax.swing.JButton button_originalImage;
    private javax.swing.JButton button_reset;
    private javax.swing.JLabel datadiri;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel judul;
    private javax.swing.JLabel label_image;
    private javax.swing.JSlider slider;
    private javax.swing.JSlider slider1;
    private javax.swing.JTextField text_filePath;
    private javax.swing.JTextField text_getClick;
    private javax.swing.JTextField text_sliderValue;
    // End of variables declaration//GEN-END:variables
}
